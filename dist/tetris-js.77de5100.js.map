{"version":3,"sources":["classes/Point.ts","classes/Figure/Figure.ts","classes/RendererCanvas.ts","classes/FigureMaker.ts","classes/PointsStack/PointsStack.ts","classes/Tetris.ts","index.ts"],"names":[],"mappings":";;;;ACAA,ADAA,AICA,AFAA,AIDA,ILAA,ADAA,AICA,AFAA,AIDA,OLAA,AGCA,CJDA,AECA,AIDA,ELAA,AGCA,CJDA,AECA,AIDA,MLAA,AGCA,CHDA,ADAA,AICA,AFAA,AIDA,CNAA,AECA,AIDA,SLAA,AGCA,CHDA,AGCA,OJDA,AECA,CFDA,AECA,AIDA,CAAA;;ALEA,ADOA,AINa,AFAb,AIDA,ILAY,ADOZ,AENA,AIDI,GFCS,CAAA,CJMb,CMPU,CFCG,EEDA,CLAb,AGCmB,GEDF,CJCjB,MEAoB,CAAD,AEDF,CAAA,CFCc,CAAZ,EAAqB,EED3B,EAAb,EAEA;ANKA,AIN6C,AFA7C,SEA6C,CAAC,GAAG,CAAJ;AHD7C,ADOA,AINkD,AFAlD,CDDA,AGCa,UHDD,CDOZ,AENA,SDDA,EAAsB;AACpB,ADWA,AEHA,EDRA,SDWA,AEHA,CDRA,CAAA,GDWA,CAAY,CAAZ,EAAuB,CAAvB,ECXA,ADWkC,CCXlC,CCQA,CAAY,EFGZ,EAAiD,CCXjD,ACQA,CDRA,CCQmB,EDRnB,ADWA,CCXA,CAAA,ADW2E,EEH3E,CDRA,CCQ2B,MDR3B,ACQA,EAAsC;ADPtC,ADUiD,AIPnD,AFI6B,AGX7B,EJIE,EGGF,ACPA,ILcmD,AEHtB,IDP3B,CAAA,ADUiD,CEHtB,CEJ7B,GJOmD,CEHtB,CGX7B,GJIE,ADUiD,AKdnD,CJIE,ADUiD,AEHtB,CAAA,CFGsB,CEHtB,KDP3B,CAAA,GAAA,CAAA,CAAA,AIJF,CAAA,EJIE,KIJF,CAAA,EJIE,gBIJF,CAAA,CAAA;AJKE,ADSiD,AIPnD,AFI6B,EDN3B,IDSiD,AEHtB,KFGsB,CCTjD,ACM2B,CDN3B,CDSyD,CEH9B,EAAA,KFG8B,CCTzD,ADSyD,CCTzD,KDSyD,CAAO,CCThE,CAAA,GAAA,CAAA,CAAA,GAAA,CDSiD,MCTjD;AACA,ADQ2E,AIP7E,AFIwC,AGVxC,EJKE,EILF,QJKE,AGCF,CHDE,IILF,GAAA,GJKE,CAAA,OAAA,CAAA,GAAA,AILF,CJKE,AILF,CJKE,GAAA,GILF,CAAA,GJKE,YILF,CAAA,CAAA;AJME,AGIA,EHJA,SGIA,CHJA,CAAA,SGIA,CHJA,AGIY,CHJZ,MAAA,AGIA,CHJA,CGI6B,EHJ7B,CAAA,CAAA,AGIA,EAA2C,CHJ3C,MAAA,KGIA,EAAkE;AHHnE,AERD,AHeI,AIJyC,AFCzC,AGVJ,CJAA,EAAY,CEFZ,AEEA,IDS6C,CJIpC,AEHA,CFGL,EGfJ,AEEA,CJAsB,ADaT,AEHT,CFGA,CGfJ,AEEA,CJAY,ACUuB,IEDU,ECT7C,CJAY,AIAZ,CJAY,ACU+B,CEDE,AFCD,ECZ5C,CAAA,ECW6C,CAAA,EAAA,CHTjC,CEFZ,CAAA,GFEY,ACUuB,CAAwB,AGV3D,CAAA,KJAY,CAAA,ICUuB,CAA/B,CCZJ,CAAA,CAAA,EFEY,GAAU,EAAV,CAAZ;ADcI,AILyC,AFEzC,MEFyC,GJKpC,AEHA,CFGL,EEHA,CFGS,CAAT,CEHW,GEF8B,EFEzB,CEFyB,CAAA,EFE9B,CAAU,UAAV,CAAqB,IAArB,CAAX;ADHJ,AERA,AHeI,AINgE,AFGhE,AGXJ,IJOY,AERZ,AECA,KLcS,AEHA,CDJT,IDOI,CGfJ,CDYI,CFGa,AKdjB,EHWmB,CGXnB,ELcI,EEHoB,GAAG,MAAR,EGXnB,CHWoC,AGXpC,CHWI,MGXJ,CAAA,2BAAA,CAAA,CAAA;AFDA,ADaI,SAAK,IAAL,GAAY,MAAM,GAAG,MAAT,GAAkB,CAA9B;ADLJ,AERA,AHgBI,AI0BF,AF5BE,AGRJ,CJEA,GIFA,ILUQ,CI0BN,AF5BO,CGRT,CJEY,CERZ,EDcI,CFEW,ECRf,ACMiB,EDNC,CDQV,EEFc,GFEG,AEFA,CAArB,GE4BF,GAAuB,IJ1BrB,EAAkC,II0BZ,MAAD,EAAkB;AHjCzC,AETF,AHiBM,AI0BI,AF5BN,AGTJ,EJGE,MAAA,CAAA,ACMO,CE4BC,CD3CV,AHiBW,CI0BD,GAAA,AF5BN,CDNF,ADQI,CCRJ,CCMgB,CFEC,CCRjB,CGkCQ,CD3CV,AC2CU,CAAA,CJ1BJ,AI0BI,AF5Bc,CCfxB,AC2CU,CDNT,ACMS,CHlCR,ACMyB,CE4BjB,AF5BN,WE4BM,EAAA;AHjCR,ADQG,AIyBK,AF3BN,AGVJ,EJIE,MAAA,CAAA,ACMO,CE2BE,CAAA,CCrCX,CHUI,CE2BO,AF3BG,CDNZ,CAAA,AGiCS,CAAA,CAAA,CHjCT,AGiCQ,AF3BN,GAAkB,GDNpB,ECMyB,KAAvB;ADLF,AEVO,AHkBN,AIwBO,AF1BN,AGDF,EJLA,AEVO,MFUP,CAAA,ACMO,CE0BK,CAAA,AC3BZ,EFfO,ADgBL,CChBK,AC0CK,AF1BA,EDNZ,AGgCY,CHhCZ,AGgCY,AC3BZ,CD2BY,CAAJ,CHhCR,AEVO,ADgBL,AGDF,GFfA,ADgBqB,IDNrB,CCM0B,KChBZ,CDgBZ,GChBF,EAAgC,GAAhC,EAA8C;AFW9C,AEVE,ADgBA,AGFF,EJJA,MAAA,AEVM,AEcN,CJJA,ACMO,IGFP,EFda,ADgBX,CGFF,CJJA,CAAA,AEVgB,ADgBA,EChBd,AEcF,CJJA,GCME,KDNF;AACA,AEVE,AHkBF,AIuBE,AFzBD,EDND,ADQA,KAAA,CCRA,AEVM,AHkBN,CCRA,IEVW,ACyCF,GDzCK,CHkBd,CAAA,ICRA,CAAA,CEVc,CAAA,CFUd,GDQA,EGlBc,CAAO,AHkBrB,KGlBE,CAF4C,CFY9C,AETE,KHiBF;ACPA,AETE,AHiBA,AIuBE,ACcJ,EJ7CA,MAAA,AG+BI,CH/BJ,AI6CA,ELrCS,CAAC,EIuBA,EAAE,CH/BZ,ADQe,CCRf,ADQS,EAAS,CCRlB,CG+BkB,CAAC,ACcnB,ELrCuB,CAAd,AKqCQ,CLrCf,ECRF,AG8BS,OCeQ,CAAA,EAAC;AJ5CnB,ADQE,AIuBG,AFzBJ,AGuCE,CJpDJ,CCaE,CDbU,ADaV,KIyBI,CHtCY,GAAN,CGsCD,EAAE,CFzBX,CAAA,EDbU,CAAA,CGsCO,CAAC,CAAD,CAAN,CAAU,CHtCX,ACaV,CAAA,IDbU,AGoCD,MFvBT,CDbU,CAAA,CCaV,KDbU,GAAM,EAAN,CAAZ,CCaE;ACdE,ACwCE,AFzBF,AGuCA,QFtDI,ACwCF,CAAC,AFzBE,CGuCC,CDdH,CDxCK,ACqCD,AFtBP,CAAS,GGuCG,CFtDC,EEsDE,GHvCf,EGuCmB,CFtDN,ADeQ,AGuCD,CFtDP,ADeb,UCfa,CAAW,IEsDT,CFtDf,CEsDA,CFtD+B;AFYnC,AEXM,AHiBJ,AIuBI,EJvBJ,ECNF,EEXM,CHiBJ,CAAA,AIuBI,CAAC,CH7BP,CG6BO,EDxCM,CAAC,CAAD,CAAP,CHiBJ,CAAA,CGjBiB,CAAC,CAAD,EAAI,CAAJ,EAAO,AHiBxB,CGjBiB,EAAU,AHiB3B,CGjBiB,CAAb,UHiBJ;ACNF,AEVM,AHiBF,AIkBO,AFrBP,AGuCA,MFrDE,CCmCF,EFrBK,CGuCA,CLpCE,AKoCD,CAAC,CFrDE,ADcA,CCdC,ADcA,CCdD,CAAP,AHiBU,CEHC,CAAb,CCde,AEqDV,CFrDW,ADcA,CCdD,AHiBf,AEHiB,ECdE,CAAJ,AEqDI,CHvCE,CCdC,AEqDjB,CFrDU,EAAU,CAAV,ADcW,AGuCD,CFrDvB,AEqDwB,CAAC,KHvC3B,EAAmC,AGuCV,CHvCW,EAApC,EAAwC,AGuCD,EAAlC,IAAwC,CAAC,CAAC,OAAF,KAAc,EAAvD,IAA8D,CAAC,MAAnE,EAA2E;AJ3C/E,AETM,AHiBH,AIuBA,AF1BG,AGuCA,GLtCJ,EIiBA,CDhCI,KAAK,ADcA,CDLX,EETc,ADcR,CAAS,MAAT,CCdQ,ADcQ,CCdR,ADcS,GAAG,GCdZ,CAAO,CDcU,KCdzB,CDcgB,GAAkB,GAAlC,EAAuC,CAAvC;ADAJ,AEbG,ADcC,AGuCD,WJxCH,ACCS,GAAL,CAAS,EDDb,CAAY,GCCR,CAAgB,CAAC,EDDrB,CCCwB,CDDU,ICCL,IDD7B,EAA6D,ACCzC,GAAkB,EDDtC,CCCI,CDDuE,CCChC,KAAK,MAA5C;ADD8B,ADKlC,AInBE,AFgBE,EFGJ,KAAA,CCLkC,ADKlC,CInBO,EFgBE,EEhBP,CFgBE,CAAS,CDFqB,AGdpB,CJmBd,CAAA,EInBE,CHcgC,ACE9B,KDF8B,ADKlC,CCLkC,EAAA,ADKlC,YAAA;ACLkC,AEXhC,AHiBA,AInBA,AFgBC,AGuCG,MJ1C4B,EEX5B,CCFC,CCuDD,CLpCG,CGjBC,AEqDJ,EJ1C4B,CI0C5B,CLpCQ,AInBZ,CHagC,AEXnB,ECFE,EHaiB,ADMhC,AKoCI,CAAA,GFrDS,CAAA,ACFb,OCuDI,EAAA,CFrDS,CAAW,MAAxB,EAAgC;AFWyB,AEVvD,AHiBH,AInBC,ACsDI,GLrCN,GGfI,GCFG,CCsDA,CAAA,EFpDI,CAAC,AEoDL,CFpDI,ACFT,CDEE,AEoDG,CAAA,CDtDS,ACsDT,CFpDU,ACFA,ACsDX,CFpDY,CAAD,ACFD,CAAd,CDEmB,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAb;AACA,ACFF,AFgBA,AGqCI,MFnDF,GCFG,AFgBA,CGqCG,CAAA,EFnDC,ADcA,CCdC,ADcA,AGqCF,CFnDC,ACFT,CDEE,ACFU,ACqDJ,CHrCK,AGqCL,CHrCR,AGqCQ,CFnDO,AEmDX,CFnDY,ADcA,CCdD,ADcE,ECdE,CAAJ,CDcM,CCdC,CAAP,CCFf,CDEyB,CAAV,ADcW,CCdxB,GDcF,EAAgC,CAAC,EAAjC,EAAqC;ADJrC,AETE,AHiBJ,AInBC,AFgBG,EFGJ,IGjBI,CHiBJ,CAAA,CCRO,EETE,ADcA,GCdG,ADcR,CAAS,CDLX,CDQF,CAAA,CCRiB,ECKb,CCdQ,ADcQ,CCdR,ADcR,EAAmB,CDLrB,ADQF,AEHwB,GCdZ,AHiBZ,AEH2B,CCdR,IDca,CCd5B,IHiBK,CEHc,GAAkB,CFGzC,EAAsB,AEHlB;ADJF,AETC,AHiBD,AEHE,AGqCF,SJ1CK,ADQA,CKkCD,CHrCG,AGqCF,CAAC,ELlCN,AEHE,CAAS,EDLX,ADQa,EKkCT,CJ1CY,CCKd,CFGF,AEHkB,EGqCA,EAAlB,CHrCuB,CDLvB,AI0CsB,IHrCpB,EAA4B,CAAC,GAAG,KAAK,MAAT,GAAkB,GAA9C;ADJF,ADQA,AInBM,AFgBJ,AGqCA,EDrDI,OHWD,EDQE,AEHA,EEhBD,CHWN,AGXM,AFgBJ,CFGF,AEHW,AGqCF,EJ1CI,GI0CA,CHrCX,AGqCY,CJ1CI,CGXZ,CAAA,EHWgB,IGXhB,EHWsB,AI0CnB,CJ1CoB,AGX/B,ACqD4B,KJ1C1B,KGXa,QCqDJ,CAAoC,GDrD/C,EAA2B,CCqDhB,EAA4C,CAAC,CAAD,EAAI,CAAJ,CAA5C,CAAP,EAA4D;AJzC/D,AETC,AHiBD,AInBC,AFgBC,AGqCG,GLrCN,KGdM,CCFC,CCqDD,EFnDI,CCFC,CAAC,ECqDA,CFnDG,ACFA,ACqDF,CDrDX,EAAgB,CAAC,GAAG,CDEP,CAAA,EEmDT,CDrDqB,ACqDF,CAAC,CAAD,EDrDvB,ACqD2B,CAAJ,CDrDQ,ACqD3B,CFnDS,ACFmB,CDER,CCFxB,EAAoC,EDEpC,EAA+B;AAC7B,ACFA,AFgBH,AGqCK,GHlDN,GCDI,IEmDE,CDrDG,ACqDF,EFnDI,CAAC,CAAD,ACFE,CDET,ACFU,GDEG,ACFA,CDEC,ACFd,CDEa,CCFG,CDEC,ACFA,CDEJ,EAAO,ACFA,CDEP,EAAU,CAAV,CAAb,ACFyB,OAAzB,EAAkC,CAAC,EAAnC,EAAuC;AHY3C,AETI,AHiBJ,AInBM,ACqDD,EJ1CL,ADQA,IGjBI,CHiBJ,CCRA,ADQA,CCRA,GGXU,CDEC,ACFA,CDEC,CAAD,CAAP,CHiBJ,CCRA,ADQA,AInBgB,CHWhB,AETiB,CAAC,CAAD,EAAI,CAAJ,ACFN,CAAY,CDEC,AHiBxB,AInBW,CDEM,ACFX,EDEqB,AHiB3B,AInB2B,CHW3B,AETiB,CAAb,EFSJ,MDQS,ICRG,CDQZ,ECRA,ADQqB,ECRI;AACvB,AETE,AHiBF,AInBM,AFgBR,EAAA,ICdI,GFSG,ADQA,EGjBE,GAAG,AHiBV,CInBW,CFgBb,CDLE,ADQa,AEHf,GDLkB,CGXV,CDEI,AHiBV,AInBkB,CHWlB,AETU,ACFJ,GFgBR,CEhByB,AFgBzB,ECdY,ACFJ,CDEW,IAAf,KDcJ,GAAA,UACE,MADF,EAEE,YAFF,EAOG;ADXF,AETE,AHiBD,AInBK,AFeP,AGsCI,GJ5CJ,KCMA,AGsCI,GLlCK,EEJT,AGsCQ,CAAC,CLlCP,CEJF,IAAA,UGsCI,CAAsB,MAAtB;ALjCH,GAHD;ACJA,AETE,ACHI,AFgBJ,AGqCE,EJzCJ,MAAA,AETM,ADaJ,AGqCE,CJzCJ,GETU,CCHC,ACqDH,CAAC,GFlDM,CFSf,CAAA,AGZM,CAAY,AFgBhB,CEhBI,EAAe,CAAf,CDGS,ADab,CDJF,AETe,ECHW,ACqDtB,CJzCJ,CCIE,CAAA,CEhB4B,CFgB5B,GCba,CAAW,ECHI,CAAA,CHY9B,CETE,EAA+B,CCHP,CAAU,CAAV,EAAa,CAAb,EAAgB,YAAhB,CAApB;AHaJ,AETE,AHiBJ,AIpBK,AFeH,AGsCC,ELjCH,IGjBI,ADYF,CFKF,AKyBE,CLzBF,GCRS,EETE,AEkDF,CFlDG,CAAD,CAAP,CHiBJ,CAAA,AELE,CCZe,CAAC,CAAD,ADYf,ECZmB,CAAJ,EAAO,CAAP,EAAU,AHiB3B,CGjBiB,CAAb,CHiBJ,UAAY,GAAZ,EAAyB;ACPrB,AETA,AHiBF,AIpBC,AFeC,AGsCA,MJzCA,AETA,EDYA,CFKG,AELF,CFKH,CGjBO,ADYF,CDHG,ACER,AGuCM,CLjCG,CCRC,AETA,EHiBE,CAAC,CAAD,AKiCA,CJzCG,ADQf,EKiCY,CFlDF,CAAA,GFSA,AIyCE,CJzCW,AIyCrB,EFlDQ,CAAO,GFQV,GERL;AFUA,AETD,AHiBD,AIpBD,AFeG,GExBI,GHqBJ,ECGA,CFKG,AELF,CFKH,CCRO,ACGF,CAFL,CDDS,ADQA,GAAG,CAAC,CCRC,ADQF,CAAZ,MCRS,CAAa,CAAb,EAAgB;AAFlB,ADWP,AELE,AGsCA,KJ5CF,GCME,GFKK,CKiCD,CHtCC,AGsCA,CAAC,CLjCR,AELS,KAAK,CGsCR,IHzCN,CGyCoB,EAAlB,EAAsB;AJxCzB,AETC,AHiBD,AIpBD,AFeI,AGsCE,EDrDN,CHOA,ADSA,KGbM,ADYF,EGsCE,EFlDI,CCHV,CAAA,AFeU,EAAE,AGsCA,CFlDG,EEkDA,CAAC,CHtCC,AGsCA,EDrDjB,CAAA,ACqDoB,CFlDL,AEkDA,CFlDA,CEkDQ,CAAR,CAAT,OFlDS,CAAW,ACH1B,GAAA,CDGE,EAA8B,SCHhC;ADII,ACHF,AFUA,AG2CG,MFlDD,CDOF,CEVI,KDGK,CAAC,ACHA,CDGD,CAAP,CCHoB,EDGP,ACHf,CDGgB,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAb;AFUJ,AETI,AHgBN,AInBI,AFcC,EDFH,IETI,EFSJ,CAAA,ADOF,AInBS,EDGE,GAAG,AHgBd,CInBI,CAAY,EHYd,CAAA,GETY,CAAA,ACHV,CAAoB,KDGV,CAAO,IFSnB,AGZsB,EDGlB,CFSJ,AGZsB,EAAG,QHYT,GAAhB,EAA6B;AACpB,AETN,AH1BL,AIuBM,ACqDA,CL5EN,EAAA,GIuBM,EHYK,CAAA,AGZF,CAAC,EHYC,AIyCD,CAAC,CAAC,CJzCD,CAAA,CAAA,AGZL,CHYK,AGZO,GCqDR,KAAc,EDrDN,ACqDZ,EAAsB,GDrDV,EAAK;AHYZ,AGZgB,AFevB,AGuCI,QJ1CM,ACGJ,CDHI,CI0CN,EJ1CM,CCGC,EDHD,AGZa,CHYb,ACGI,AGuCJ,CJ1CA,CAAH,CI0CM,CAAC,CDtDe,AFeV,AGuCJ,CDtDe,ECsDZ,CAAL,CDtDU,AFevB,CEfmC,ACsDd,CAAR,CAAT,GDtDmB,CAAA;AHavB,AERA,AH5BS,AIuBgC,AFgBzC,AGuCG,OL9EM,AIuBP,CJvBO,AEuCH,GDHC,AERA,EH5BE,CEuCG,CCXD,CFQC,ADpCH,CEuCM,IFvCN,CEuCW,CDHb,AERI,CFQS,AERT,CFQJ,EAAgB,CAAhB,ACGP,CDHA,IERW,CAAJ,CAAW,OAAX,EAAoB,GAApB,EAAyB,KAAzB,CAAP;AFSD,AERA,ACLE,AFiBD,GDPF,AExCO,EC4BL,IFmBK,GAAL,CAAS,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAzB,EAAgC,MAAhC;AEhBA,AFkBA,AGqCE,SHrCG,EElBE,CFkBP,AGqCM,CHrCG,IElBT,ACuDU,CAAC,IHrCX,OGqCM,CAAiB,kBAAjB,CAAoC,MAApC,EAA4C,MAA5C,CAAJ,EAAyD;AJzC7D,AETF,ACJG,AFkBC,AGqCI,EJ1CN,CGnBA,KHmBA,CAAA,AETF,ADcS,CGqCD,MAAM,CAAC,CJ1Cb,CAAA,ACKE,CCdJ,QFSE,AI0CM,CAAmB,EJ1CzB,II0CM,QJ1CN;AAAA,AE9CF,ADqDI,CCrDJ,EAAA,CDqDI,IDPF,ECOQ,CAAC,EDPT,GAAA,ECOE,CAAe,CDPjB,SCOiB,KAAA,EAAK;AElBtB,AFmBI,AGmCE,EDtDN,IFmBI,IGmCE,CHnCE,CAAC,CEnBT,CAAA,CFmBI,AGmCM,CHnCG,AGmCF,MAAL,CDtDN,CAAA,CFmBI,GAAqB,IEnBzB,GAAA,CFmByB,CAAA,MAAA,CAAO,CEnBvB,GAAT,EAAsB,KFmBlB;ADPI,AERV,ACHW,ACsDJ,OFnDP,CFQU,AERV,ACHW,CAAA,CHWD,EGXC,CHWD,EGXC,CAAA,CDGX,ACHW,CHWD,AERV,ACHW,GDGI,KFQL,MERV;AFQU,AGXC,AFmBL,AGoCD,QJ5CM,AGXG,CAAA,CHWH,ACQD,EEnBI,CHWH,EAAA,AGXG,AFmBC,CDRJ,AGXG,AFmBE,CDRL,AGXG,CHWJ,AGXC,GFmBD,KAAgB,CAApB,EAAuB;ADRnB,AGVN,AFmBU,AGoCX,KAjCD,GJZa,EAAA,CGVJ,CFmBG,CDTC,CCSD,CDTC,CAAA,AGVC,CHUD,ACSD,CDTJ,IGVC,AFmBG,CEnBS,AFmBT,CEnBH,EAAe,CAAf,CAAP,MFmBU,EAAA;ADPV,AGXD,AFkBW,GErBZ,KHcM,ICOO,CAAA,CDPD,ECOC,CDPW,CCOX,CDPX,ACOW,CAAA,CAAD;ADNV,ACMU,AGvCV,SJiCK,AIjCA,GHuCS,CAAA,GDNd,ACMc,CDND,CCMC,CAAA,CAAA,AGvCd,CHuCU,EGvCS,CJiCnB,CAAqB,EIjCE,QJiCD,KIjCC,CAAA,CJiCF,EAAU,CAAV,EAAW,GIjCT,CAAJ,CAAgB,EAAhB,EAAoB,EAApB,CAAnB;AJkCE,AGXJ,EAAA,WHWW,AGXX,CAAA,MHWkB,CAAC,EGXnB,CAAA,IHWW,CAAgB,IGX3B,GAAA,GHW4B,KAAD,EAAQ,AGXzB,CHWiB,EAAS,GGXpC,EAAyB,CAAI,CAA7B;AHYM,ACKA,AGvCE,QHuCF,AGvCE,EAAA,GHuCE,AGvCF,CHuCG,CDLL,ECKA,CAAS,AGvCP,GJkCI,CAAC,IAAP,CACE,ACIF,EGvCE,CHuCmB,AGvCnB,CJmCI,ICIoB,CAAC,CGvCzB,CJmCI,CAAA,AInCJ,EHuCF,GDJE,CACE,CAAC,GAAG,EADN,EAEE,CAAC,GAAG,EAFN,EAGE,KAHF,EAIE,KAAK,GAAG,KAAI,CAAC,KAAR,GAAgB,MAAM,CAAC,WAJ9B,CADF,CAAA;AAOC,AGPP,AClCQ,EDkCR,KHDW,CAAP,AIjCM,KDkCV,CAAA,CClCU,GAAA,EAAA,CAAA,EDkCV,CAAA,IClCQ,GDkCR,GAAA,YAAA;AHSG,AGRD,AFKI,AGxCE,KJgCN,GCQI,AGxCa,GDmCV,CCnCU,CHwCT,CAAC,CGxCQ,EHwCb,AGxCa,CHwCJ,AGxCI,IHwCb,AGxCE,EHyCA;ADGN,AGRE,AFMI,MENJ,EFMI,CAAC,EDEA,CCFG,CEND,EAAE,EHQX,ACFc,CAAC,EENC,IFMV,GEPC,AFOiB,GAFpB,EAGE,CAAC,GAAG,KAAI,CAAC,MAAT,GAAkB,GAHpB,EAIE,KAAI,CAAC,MAJP,EAKE,KAAI,CAAC,MALP;ADKL,AGRG,ACpCF,GJ2BF,GGSI,GCpCG,CDoCC,EAAE,GCpCR,EDoCa,CCpCC,EAAd;ADkCO,AFYH,AG7CJ,KDiCA,GFYI,CG7CC,IH6CG,CAAC,AG7CT,GH6CI,AG7CS,CH6CA,IAAT,EG7CgB,GAAG,KAAK,MAA5B;AJ6CF,AGRC,ACpCC,EJ4CF,CGbA,KHaA,CAAA,AI5CO,MAAL,GJ4CF,AI5CgB,CJ4ChB,GI5CoB,GAAG,IJ4CvB,CI5C4B,EJ4C5B,II5CE,QJ4CF;AACE,ACAI,AG5CJ,QH4CI,CG5CC,EJ4CE,ECAC,CAAC,EDAG,CCAR,AG5CJ,CH4Ca,EG5CG,GJ4ChB,CI5CoB,KH4ChB,GAAuB,QAAA,AG5CP,CH4CO,AG5CP,MH4CO,CAAO,EG5Cd,CAAJ,CAAmB,CH4C/B,IG5CoC,KAAxB,EAA+B,KAAK,MAApC,CAAhB;AJ6CD,AGRD,ACpCE,EDoCF,CHMA,MI1CO,IDoCP,CAAA,MCpCE,GDoCF,ACpCqB,CDoCrB,CCpCE,ODoCF,GAAA,UAAS,GAAT,EAAoB,CAAI,CAAxB;AFQM,AG3CJ,QH2CI,CG3CC,IH2CG,CAAC,GAAL,AG3CJ,CH2Ca,AG3CC,MH2CV,IG3CJ;AJ6CF,AGRA,AFOK,AG3CH,EJ4CF,AGRA,MHQA,CAAA,AI5CO,IDoCP,CAAA,CCpCE,GJ4CF,AI5CgB,CJ4ChB,IGRA,ACpCE,CDoCF,MHQA,AGRA,GHQA,AGRA,UAAO,EHQP,CGRA,EAAkB,CAAI,CAAtB,CAxDF,CA0DE;AHOE,AI5CA,SAAK,EJ4CE,KAAK,KI5CZ,GJ4CA,AI5CoB,IAApB;AJ6CD,ACDG,AG3CF,GJ0CF,GCCI,GG3CG,EH2CC,CAAC,GAAL,CAAS,MG3CX,GH2CE;AENJ,AFOG,AG3CF,EDoCD,GFXE,QEWF,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,MAAnB,EAAsC,IAAtC,EAAsE;AHStE,AGRQ,AFOP,EDCD,CCrCA,KDqCA,AGRQ,CHQR,CGRQ,GAAA,KHQR,AGRQ,CHQR,QAAA,GAAA,QGRQ,CAAA,GHQR,GGRQ,CAAA;AHSN,AGTM,ACnCR,EAAA,MDmCU,ACnCV,CAAA,EJ4CS,GGTC,EHSI,CGTJ,CCnCV,CDmCU,ACnCV,CDmCU,CHSR,KGTM,KCnCR,GAAA,YAAA;AJ6CC,AGVO,AFQV,AG1CI,GJ0CF,KGRkB,CFQpB,EG1CW,EDkCS,GAAA,EAAA,CAAA,IFQpB,CERU,AClCC,CAAA,SAAA,CAAA,CAAY,MAAZ,CAAmB,QAAA,CAAA,UAAA,CAAW,KAA9B,CAAP;ADkCM,AFhEV,AG+BG,CH/BH,EAAA,AG6BE,KDmCyB,CAAA,GAAA,EAAA,CAAA,CAAjB;AHWV,AGXU,QAAoB,CHW9B,AGX8B,GAAA,EAAA,CHW9B,AGX8B,CAApB;AH9CV,ACwDA,AGzCE,CJfF,CIeE,CJfF,ICwDA,CAAA,AGzCE,CAAA,QHyCF,CAAA,AGzCE,CAAA,EHyCa,aGzCb,CHyCF,EGzCE,UAAgB,MAAhB,EAAgC,WAAhC,EAAwD;ADgC9C,AC/BR,QD+BQ,AC/BF,ED+BE,GAAA,IAAA,CAAA,CC/BS,CD+BT,EC/BY,WAAW,CAAC,SAAZ,EAApB;AJ2CJ,AGZY,OHYZ,CAAA,AGZY,EAAA,GAAA,EAAA,EHYZ,CAAA,EGZY,CHYG,IGZH,CAAA,CHYZ,EGZY,CAAA,GAAA,EAAA;AAAA,AC9BR,QD8BgB,AC9BZ,CAAC,CD8BW,GAAA,EC9BhB,ED8BgB,AC9BH,CD8BG,EAAR;AAAA,AC7BN,QD6Bc,EAAA,GAAA,AC7BP,ED6BO,KAAA,IC7Bd,CD6Bc,CAAA,GAAA,CAAA,GAAA,EAAR;AC5BP;AD6BD,QAAI,CAAC,GAAG,MAAJ,GAAa,KAAK,IAAlB,IAA0B,CAAC,GAAG,KAAJ,GAAY,KAAK,OAA3C,IAAsD,CAAC,GAAG,CAA9D,EAAiE;AAC/D,AC5BF,QAAM,KD4BG,KAAP,EC5BgB,GAAG,MAAM,CAAC,SAAP,EAArB;AD6BC,AC3BD,WAAO,WAAW,CAAC,GAAZ,CAAgB,UAAA,KAAA,EAAK;AACpB,UAAA,EAAA,GAAA,KAAA,CAAA,WAAA,EAAA;AD4BR,AC5BQ,QD4BJ,EC5BK,CD4BF,AC5BE,GD4BC,AC5BD,EAAA,CAAA,CD4BT,AC5BS,CAAD;AAAA,UAAI,CAAA,GAAA,EAAA,CAAA,CAAA,CAAJ;AD6BR,IAAA,GAAG,EAAE,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AACpC,AC7BA,UAAM,CD6BD,IAAI,CAAC,GAAG,CAAb,AC7BgB,ED6BA,CAAC,AC7BE,GD6BC,KAApB,EAA2B,CAAC,CC7BG,CD6B/B,AC7BgC,ED6BA,EC7Bb,CAAkB,UAAA,QAAA,EAAQ;AD8B3C,AC7BM,YD8BJ,AC9BI,EAAA,GD8BC,AC9BD,QD8BJ,AC9BI,CD8BU,AC9BV,CD8BW,CAAC,GAAG,EAAL,EAAS,CAAC,CC9BpB,ED8BuB,AC9BvB,ED8BU,CAAd,EAAgC,KAAhC,GAAwC,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,EAAa,QAAb,EAAxC,GACA,CAFF,EAGE;AACA,ACjCI,UDiCJ,ECjCK,CDiCF,ECjCE,CDiCC,ECjCD,EAAA,CDiCL,ACjCK,CAAA,CAAD;ADkCJ,AClCI,YAAM,GAAA,CDkCJ,EClCI,CDkCV,CClCU,CAAA,CAAA,CAAN;ADmCL;AACF,ACnCC,eAAO,GAAG,KAAK,CAAR,IAAa,GAAG,KAAK,CAA5B;ADoCH,ACnCE,OAHkB,CAAnB;AAKA,aAAO,UAAU,IAAI,KAArB;ADkCF,ACjCC,KARM,CAAP,KDyCO,GAAP;AACD,ACjCA,GDaD,AC9BA;;ADmDF,AChCE,EAAA,MAAA,CDgCF,AChCE,SAAA,CAAA,CDgCF,MChCE,GAAA,YAAA;ADhDF,ACiDI,CDjDJ,EAAA,CCiDI,KAAK,CAAC,UAAD,CAAL;AACA,IAAA,aAAa,CAAC,KAAK,QAAN,CAAb;ADgCJ,AC/BI,OD+BJ,CAAA,CC/BS,QD+BT,AC/BI,CD+BJ,EC/BoB,CD+BL,GC/BX,QD+BJ;AC9BG,GAJD;;AAyCA,EAAA,MAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA,CACE;AACD,GAFD;;AAIA,EAAA,MAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA,CACE;AACD,GAFD;;AAIA,EAAA,MAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,GAAG,GAAG,KAAK,OAAL,EAAV;AAEA,SAAK,QAAL,GAAgB,WAAW,CAAC,YAAA;AAC1B,UAAM,KAAK,GAAG,CAAC,KAAI,CAAC,OAAL,EAAf;;AAEA,UAAI,KAAJ,EAAW;AACT,QAAA,KAAI,CAAC,OAAL;AACD;AACF,KAN0B,EAMxB,GANwB,CAA3B;AAOD,GAVD;;AAYA,EAAA,MAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,SAAK,QAAL,CAAc,YAAd,CACE,KAAK,eAAL,CAAqB,KAAK,gBAAL,EAArB,EAA8C,KAAK,WAAnD,CADF;AAGD,GAJD,CA5GF,CAkHE;AACA;AACA;AACA;;;AAEA,EAAA,MAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;AACE,WAAO,KAAK,WAAL,CAAiB,KAAK,WAAL,CAAiB,MAAjB,GAA0B,CAA3C,KAAiD,IAAxD;AACD,GAFD;;AAIA,EAAA,MAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,QAAI,MAAM,GAAG,KAAK,gBAAL,EAAb;AACA,QAAI,SAAS,GAAG,IAAhB;;AAEA,QAAI,MAAJ,EAAY;AACJ,UAAA,EAAA,GAAA,MAAA,CAAA,WAAA,EAAA;AAAA,UAAC,CAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,UAAI,CAAA,GAAA,EAAA,CAAA,CAAA,CAAJ;;AACN,MAAA,SAAS,GAAG,CAAC,CAAD,EAAI,CAAC,GAAG,CAAR,CAAZ;AACD,KAHD,MAGO;AACL,MAAA,MAAM,GAAG,KAAK,YAAL,EAAT;AACA,WAAK,WAAL,CAAiB,IAAjB,CAAsB,MAAtB;AACA,MAAA,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAZ;AACA,MAAA,MAAM,CAAC,WAAP,CAAmB,SAAnB;AACD;;AAEK,QAAA,EAAA,GAAA,MAAA,CAAA,OAAA,EAAA;AAAA,QAAE,KAAA,GAAA,EAAA,CAAA,KAAF;AAAA,QAAS,MAAA,GAAA,EAAA,CAAA,MAAT;;AAEN,QACE,KAAK,WAAL,CAAiB,kBAAjB,CAAoC,MAAM,CAAC,SAAP,EAApC,EAAwD;AAAE,MAAA,EAAE,EAAE,CAAN;AAAS,MAAA,EAAE,EAAE;AAAb,KAAxD,CADF,EAEE;AACA,MAAA,MAAM,CAAC,WAAP,CAAmB,SAAnB;AACA,WAAK,MAAL;AACD,KALD,MAKO;AACL,UAAI,SAAS,CAAC,CAAD,CAAT,KAAiB,CAArB,EAAwB;AACtB,eAAO,KAAP;AACD;;AACD,WAAK,gBAAL,CAAsB,MAAtB;AACA,WAAK,cAAL;AACA,WAAK,MAAL;AACD,KA5BH,CA8BE;;AACD,GA/BD;;AAgCF,SAAA,MAAA;AA3JA,CAAA,EAAA;;AAAa,OAAA,CAAA,MAAA,GAAA,MAAA","file":"tetris-js.77de5100.js","sourceRoot":"..","sourcesContent":["import { Colors } from './Figure/Figure'\n\ninterface IPoint {\n  x: number\n  y: number\n  value: 0 | 1\n  color: Colors\n}\n\nexport class Point implements IPoint {\n  x: number\n  y: number\n  value: 0 | 1\n  color: Colors\n  constructor(x: number, y: number, value?: 0 | 1, color = Colors.transparent) {\n    this.x = x\n    this.y = y\n    this.color = color\n    if (typeof value !== 'undefined') {\n      this.value = value\n    }\n  }\n\n  getPosition() {\n    return [this.x, this.y]\n  }\n\n  getValue() {\n    return this.value\n  }\n\n  getColor() {\n    return this.color\n  }\n\n  setColor(color: Colors) {\n    this.color = color\n    return this\n  }\n\n  setValue(value: 1 | 0) {\n    this.value = value\n    return this\n  }\n\n  setPosition(pos: number[]) {\n    this.x = pos[0]\n    this.y = pos[1]\n    return this\n  }\n}\n","import { Point } from '../Point'\n\nexport enum FigureType {\n  'first' = 1,\n  'second',\n  'third',\n  'forth',\n  'five',\n}\n\nexport enum Colors {\n  green = 'green',\n  blue = 'blue',\n  black = 'black',\n  violet = 'violet',\n  transparent = 'transparent',\n  yellow = 'yellow',\n}\n\nexport interface IFigure {}\n\nclass Figure implements IFigure {\n  // Standart size of figure 4 x 2\n  pattern: (0 | 1)[][]\n  position: number[]\n  color: Colors\n  constructor(pattern: (0 | 1)[][], position: number[] = null, color?: Colors) {\n    this.pattern = pattern\n    this.position = position\n    this.color = color || Colors.black\n  }\n\n  setPosition(pos: number[]) {\n    this.position = pos\n  }\n\n  getSize() {\n    return {\n      height: this.pattern.length,\n      width: this.pattern[0].length,\n    }\n  }\n\n  getPatternValue(pos: number[]) {\n    const [x, y] = pos\n    return this.pattern[y][x]\n  }\n\n  getPoints() {\n    const [dX, dY] = this.position\n\n    let points: Point[] = []\n    this.pattern.forEach((ptrnRow, y) => {\n      return ptrnRow.forEach((value, x) =>\n        points.push(\n          new Point(\n            x + dX,\n            y + dY,\n            value,\n            value ? this.color : Colors.transparent\n          )\n        )\n      )\n    })\n    return points\n  }\n\n  getPattern() {\n    return this.pattern\n  }\n\n  getPosition() {\n    return this.position\n  }\n\n  getColor() {\n    return this.color\n  }\n}\n\nexport default Figure\n","import { Point } from './Point'\nimport Figure, { Colors } from './Figure/Figure'\n\nclass RendererCanvas {\n  ctx: CanvasRenderingContext2D\n  node: HTMLCanvasElement\n  width: number\n  square: number\n  height: number\n  columns: number\n  rows: number\n  constructor(width, height, square = 20) {\n    this.node = <HTMLCanvasElement>document.getElementById('tetris-js')\n    this.ctx = this.node.getContext('2d')\n    this.columns = width / square + 1\n    this.rows = height / square + 1\n    this.width = width + 1\n    this.height = height + 1\n    this.node.width = this.width\n    this.node.height = this.height\n    this.square = square\n  }\n\n  renderGrid() {\n    this.ctx.lineWidth = 1\n    for (let i = 0; i <= this.columns; i++) {\n      this.ctx.moveTo(i * this.square + 0.5, 0)\n      this.ctx.lineTo(i * this.square + 0.5, this.height)\n      this.ctx.stroke()\n    }\n\n    for (let j = 0; j <= this.rows; j++) {\n      this.ctx.moveTo(0, j * this.square + 0.5)\n      this.ctx.lineTo(this.width, j * this.square + 0.5)\n      this.ctx.stroke()\n    }\n  }\n\n  renderPoints(\n    points: Point[],\n    clearMeasure: { x: number; y: number; width: number; height: number } = {\n      x: 0,\n      y: 0,\n      width: this.width,\n      height: this.height,\n    }\n  ) {\n    const width = this.width\n    const height = this.height\n\n    this.ctx.clearRect(0, 0, width, height)\n\n    this.ctx.beginPath()\n    this.renderGrid()\n\n    points.forEach(point => {\n      this.ctx.fillStyle = Colors.transparent\n      if (point.value === 1) {\n        const [x, y] = point.getPosition()\n        this.ctx.fillStyle = point.color\n        this.ctx.rect(\n          //TODO: Create util for thar\n          x * this.square + 0.5,\n          y * this.square + 0.5,\n          this.square,\n          this.square\n        )\n        this.ctx.fill()\n        this.ctx.strokeStyle = Colors.black\n        this.ctx.stroke()\n      }\n\n      this.ctx.closePath()\n    })\n  }\n}\n\nexport default RendererCanvas\n","import Figure, { FigureType, Colors } from './Figure/Figure'\n\nclass FigureMaker {\n  static create(type: FigureType, pos?: number[]) {\n    let pattern = []\n    let color = Colors.black\n    // Will be random value\n    // Should be in empty space\n\n    if (type === FigureType.first) {\n      pattern[0] = [0, 1, 1, 0]\n      pattern[1] = [1, 1, 1, 1]\n      color = Colors.violet\n    }\n\n    if (type === FigureType.second) {\n      pattern[0] = [1, 1, 1, 1]\n      pattern[1] = [0, 0, 0, 1]\n      color = Colors.green\n    }\n\n    if (type === FigureType.third) {\n      pattern[0] = [1, 1, 1, 1]\n      pattern[1] = [1, 0, 0, 0]\n      color = Colors.blue\n    }\n\n    if (type === FigureType.forth) {\n      pattern[0] = [1, 1, 1, 1]\n      color = Colors.yellow\n    }\n\n    if (type === FigureType.five) {\n      pattern[0] = [1, 1, 1, 1, 1, 1]\n      color = Colors.yellow\n    }\n\n    return new Figure(pattern, pos, color)\n  }\n}\n\nexport default FigureMaker\n","import Figure, { Colors } from '../Figure/Figure'\nimport { Point } from '../Point'\n\nexport const sum = (a: number, b: number) => a + b\n\nexport interface ILayout {}\n\nclass PointsStack {\n  private points: Point[][]\n  private columns: number\n  private rows: number\n  constructor(columns: number, rows: number, defaultValue: 1 | 0 = 0) {\n    this.rows = rows\n    this.columns = columns\n    this.points = [[]]\n    this.create(defaultValue)\n  }\n\n  private create(defaultValue) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (!this.points[i]) {\n          this.points[i] = []\n        }\n        this.points[i][j] = new Point(j, i, defaultValue)\n      }\n    }\n  }\n\n  getFlatPoints() {\n    let points: Point[] = []\n    this.points.forEach(row => {\n      row.forEach(point => points.push(point))\n    })\n    return points\n  }\n\n  getPoint(pos: number[]): Point {\n    const [x, y] = pos\n    return this.points[y][x]\n  }\n\n  addPoints(points: Point[]) {}\n\n  getAreaPointsMeasure = (points: Point[][]) => {\n    const [x, y] = points[0][0].getPosition()\n    return {\n      height: points.length,\n      width: points[0].length,\n      x,\n      y,\n    }\n  }\n\n  getSize() {\n    return {\n      columns: this.columns,\n      rows: this.rows,\n    }\n  }\n\n  resetRow(row: number) {}\n\n  shrink(row: number) {}\n\n  //TODO: R\n  canChangePosPoints(points: Point[][], diff: { dY: number; dX: number }) {\n    const { height, width, x, y } = this.getAreaPointsMeasure(points)\n    const { dX = 0, dY = 0 } = diff\n    if (y + height > this.rows || x + width > this.columns || x < 0) {\n      return false\n    }\n\n    let res = true\n    out: for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        if (\n          this.getPoint([j + dX, i + dY]).value + points[i][j].getValue() >\n          1\n        ) {\n          res = false\n          break out\n        }\n      }\n    }\n    return res\n  }\n}\n\nexport default PointsStack\n","import RendererCanvas from './RendererCanvas'\nimport FigureMaker from './FigureMaker'\nimport Figure, { FigureType } from './Figure/Figure'\nimport PointsStack from './PointsStack/PointsStack'\nimport { Point } from './Point'\n\ninterface ITetris {}\n\nexport class Tetris implements ITetris {\n  renderer: RendererCanvas\n  pointsStack: PointsStack\n  figureStack: Figure[]\n  square: number\n  width: number\n  height: number\n  isFull: boolean\n  interval: NodeJS.Timeout\n  canHandleKey: boolean\n  constructor() {\n    this.pointsStack = new PointsStack(10, 20)\n    const { columns, rows } = this.pointsStack.getSize()\n    this.square = 20\n    this.width = columns * this.square\n    this.height = rows * this.square\n    this.renderer = new RendererCanvas(this.width, this.height)\n    this.figureStack = []\n    this.renderer.renderGrid()\n    this.isFull = false\n    this.canHandleKey = true\n    this.initListeners()\n  }\n\n  createFigure() {\n    return FigureMaker.create(FigureType.first)\n  }\n\n  getRenderPoints(figure: Figure, pointsStack: PointsStack) {\n    const stackPoints = pointsStack.getPoints()\n    if (!figure) {\n      return stackPoints\n    }\n\n    const figurePoints = figure.getPoints()\n\n    return stackPoints.map(point => {\n      const [x, y] = point.getPosition()\n      const matchPoint = figurePoints.find(figPoint => {\n        const [fpX, fpY] = figPoint.getPosition()\n        return fpX === x && fpY === y\n      })\n\n      return matchPoint || point\n    })\n  }\n\n  endGame() {\n    alert('END GAME')\n    clearInterval(this.interval)\n    this.interval = null\n  }\n\n  handleKeyPress = e => {\n    // if (!this.canHandleKey) return\n    const figure = this.getCurrentFigure()\n    if ((e.keyCode !== 40 && e.keyCode !== 37 && e.keyCode !== 39) || !figure) {\n      return\n    }\n\n    let [x, y] = figure.getPosition()\n\n    if (e.keyCode === 40) {\n      while (this.pointsStack.canChangePosPoints(figure, [x, y])) {\n        figure.setPosition([x, y])\n        y++\n      }\n\n      this.addFigureToStack(figure)\n      this.checkEqualRows()\n    } else {\n      let newPos\n\n      if (e.keyCode === 37) {\n        newPos = [x - 1, y]\n      }\n\n      if (e.keyCode === 39) {\n        newPos = [x + 1, y]\n      }\n\n      if (this.pointsStack.canChangePosPoints(figure, newPos)) {\n        figure.setPosition(newPos)\n        this.render()\n      }\n    }\n  }\n\n  initListeners() {\n    // window.addEventListener('keydown', e => this.handleKeyPress(e))\n  }\n\n  removeListeners() {\n    // window.removeEventListener('keydown', this.handleKeyPress)\n  }\n\n  runCycle() {\n    let res = this.runStep()\n\n    this.interval = setInterval(() => {\n      const isEnd = !this.runStep()\n\n      if (isEnd) {\n        this.endGame()\n      }\n    }, 100)\n  }\n\n  render() {\n    this.renderer.renderPoints(\n      this.getRenderPoints(this.getCurrentFigure(), this.pointsStack)\n    )\n  }\n\n  // addFigureToStack = (figure: Figure) => {\n  //   this.pointsStack.addPoints(figure)\n  //   this.figureStack.pop()\n  // }\n\n  getCurrentFigure() {\n    return this.figureStack[this.figureStack.length - 1] || null\n  }\n\n  runStep() {\n    let figure = this.getCurrentFigure()\n    let figurePos = null\n\n    if (figure) {\n      const [x, y] = figure.getPosition()\n      figurePos = [x, y + 1]\n    } else {\n      figure = this.createFigure()\n      this.figureStack.push(figure)\n      figurePos = [2, 0]\n      figure.setPosition(figurePos)\n    }\n\n    const { width, height } = figure.getSize()\n\n    if (\n      this.pointsStack.canChangePosPoints(figure.getPoints(), { dX: 0, dY: 1 })\n    ) {\n      figure.setPosition(figurePos)\n      this.render()\n    } else {\n      if (figurePos[1] === 0) {\n        return false\n      }\n      this.addFigureToStack(figure)\n      this.checkEqualRows()\n      this.render()\n    }\n\n    //   return true\n  }\n}\n","import { Tetris } from './classes/Tetris'\n\nlet tetris = new Tetris()\n\n// tetris.runCycle()\n"]}