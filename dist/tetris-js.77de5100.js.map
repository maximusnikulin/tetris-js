{"version":3,"sources":["classes/Figure/Figure.ts","classes/RendererCanvas.ts","classes/Point.ts","classes/Layout/Layout.ts","classes/FigureMaker.ts","classes/Tetris.ts","index.ts"],"names":[],"mappings":";;;AAAA,IAAY,UAAZ;AGCA,ADDA,ADEA,AKFA,IHCA,ADDA,ADEA,AKFA,OHCA,CDDA,ADEA,AKFA,EHCA,CDDA,ADEA,AKFA,MHCA,CAAA,ADDA,ADEA,AKFA,CJAA,ADEA,AKFA,SHCA,CAAA,ODDA,ADEA,CCFA,ADEA,AKFA,CAAA;ANAA,CAAA,UAAY,UAAZ,EAAsB;AACpB,AGEW,ADMb,ADLA,AKFA,ENDE,EEQF,ADLA,AKFI,GHCS,CAAA,CDMb,CIPU,CHCG,CHFX,CAAA,AMCW,CHCM,GGDF,CLEjB,KDHE,CAAA,AGEkB,CAAD,AGDF,CAAA,CHCc,CAAZ,EAAqB,CHFtC,CAAA,AMCW,EAAb,CNDE,CAAA,CAAA,GAAA,OAAA;AACA,AGC2C,ADM7C,ADLA,AKAA,ENFE,IMEI,CAAC,EHDsC,CAAC,EHD5C,CAAA,AGC+C,CAAJ,AGC7C,SNFE,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,AGAgD,ADMlD,ADLA,CEDa,CHAX,UAAA,AEMF,ADLA,CDDE,UAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA,AEUA,ADPA,EDHA,SEUA,ADPA,CDHA,CAAA,GEUA,CAAY,CAAZ,EAAuB,CAAvB,EFVA,AEUkC,CFVlC,CCGA,GCOA,ADPA,ECOiD,CFVjD,CAAA,GAAA,AEUA,CFVA,CAAA,AEU2E,GFV3E,OAAA;AACD,AGED,ADOmD,ADN/C,AIRJ,CLAA,EAAY,CGOZ,AEPA,IHcmD,CDN1C,CEDT,GHPsB,AEc6B,ADN/C,GDRQ,ACQuB,ECMgB,EGdnD,GLAY,AEcuC,AGdnD,CLAY,AEcuC,ADNR,CAAC,CCMO,QFdvC,IKAZ,CLAY,ACQuB,AIRnC,CJQ2D,MDR/C,AKAZ,CLAY,AKAZ,IJQmC,CAA/B,KDRQ,GAAU,EAAV,CAAZ,EKAA,CAAA,CAAA;AFOA,ADOmD,ADL/C,MCK+C,GDL1C,ECK0C,CDL/C,ECKuD,CDL5C,KAAK,ECKuC,CAAA,CDL5C,CAAU,ICKkC,CAAO,KDLnD,CAAqB,IAArB,CCKoC,ADL/C;ADFJ,AGAA,ADO6E,ADJ1E,AITH,ILMY,AKNZ,MLMA,EGAA,AENA,GAAA,eAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;AFUE,WAAA,MAAA,CAAY,IAAZ,EAA0B,OAA1B,EAA2C,YAA3C,EAAkE;AHJpE,AIPA,ADW6C,ADIzC,ADHF,AIVF,CLKA,CCKE,EGZF,ACEA,IFS6C,CDIpC,CAAL,CFRQ,CIPZ,CFea,CAAT,CEfJ,CHYE,CDLF,ACKE,AIVF,ELKkB,CGI2B,AET7C,KFS6C,CFC3C,CGZF,AHYE,CGZF,EDW6C,CAAA,EAAA,ECX7C,ACEA,CDFA,ACEA,CJUE,GAAA,GIVF,CAAA,QJUE,CGZF,CAAA,CAAA,ICEA,CAAA,CAAA;ALME,AGG2C,ADKzC,ADHA,EDLF,IGG2C,EHH3C,ACKM,CDLN,AEQO,CAAL,GAAS,ADHA,CCGT,EFRF,ACKc,CDLd,CGG2C,AFEzC,EDLF,CGG2C,CAAA,KHH3C;AACA,AIPF,ADSoE,ADMhE,ADHA,AIXJ,ELME,EIPF,ACCA,ILME,ACKM,CDLN,AEQO,GGdT,EHcI,ADHU,CDLZ,AIPF,ACCA,CLME,CEQe,ADHA,EDLf,ACKE,GCGA,AGdJ,CAAA,ELME,eKNF,CAAA;ALOE,AIRF,AHaI,EDLF,MAAA,CAAA,ACKO,IAAL,CAAU,EDLZ,CAAA,ECKE,CDLF,ECKoB,GAAlB,EDLF;AACA,AITF,ADUI,ADMA,ADFA,AITJ,ELIE,EKJF,ILIE,AEOM,CFPN,AGCO,AFIA,CITT,EDLA,CDUI,AFIA,CAAU,CCEC,CCNC,CHDd,CAAA,EGCE,ADMI,ADFJ,CDLF,ECKqB,ECEE,CDFrB,GDLF,OEOE,EAAkC;AFNpC,AIVF,ADWI,ADME,ADFF,AIVJ,ELKE,MAAA,CAAA,AGCO,AFIA,EGfT,AFiBW,CDFP,CAAS,GEJT,ADME,GCNa,ADMA,GFPjB,AIVF,AHeI,CDLF,CEOI,CEjBN,AHeyB,CDLvB,AIsBD,ADrBG,AFIA,aDLF;AACA,AGCE,ADMC,AGbL,ELME,MAAA,CAAA,AGCO,GEPT,CFOI,GAAY,CHDd,AGCe,CHDf,CGCc,CAAZ,CHDF,QAAA;AACD,AIXQ,ADYL,ADMD,ADFC,AIRF,CLJF,CIJS,CJIG,MAAM,AGQT,AFIA,EIRP,CLJU,CIJH,AHgBI,CGhBJ,AHgBK,CEJV,CAAY,CFIC,AIRf,CJQE,CDZQ,CAAA,AIJH,AHgBW,AIRlB,CJQmB,EGhBnB,EHgBuB,CDZb,CCYR,CEJA,CFIyB,CAAC,CDZlB,CCYR,CGhBY,CHgBkB,GGhBhC,CJIU,CAAA,AIJsB,GAAhC,EAA8C,CJIpC,GAAM,EAAN,CAAZ;AIHI,ADYD,AFIG,AIRF,QDRI,CCQC,EJQE,GAAL,CGhBS,AHgBA,AIRX,GDRc,ACQA,EDRd,CHgBE,CAAgB,AIRA,CJQC,GAAG,EAAJ,EIRA,CJQS,AIRT,GJQhB,EAA8B,CAA9B,GIRgB,CAAJ,CAAW,EAAX,EAAe,EAAf,CAAd;ALMJ,AIbI,AFkBF,ADFI,AIRF,EHUF,EFLF,GEKE,CElBM,AFkBN,CGVO,CLKT,CCGW,EGhBE,CHgBP,CAAS,CGhBC,CFkBd,AGVE,CHUF,EGVkB,CJQd,CAAgB,CAAC,CGhBP,ACQQ,CDRR,CFkBd,ADFwB,EAAJ,CCEpB,EElBc,AHgBe,CGhBR,EHgBjB,EAA8B,CGhBhC,CAF4C,CAG5C,AFiBO,ADFL,CIRkB,CAAA,GHUtB,EAAsB,IGVA,CAAJ,EAAhB;ALKJ,AIXI,ADWM,ADMN,ADFE,AIRF,EFIM,MAAA,CAAA,ADMD,AGVA,EJQE,GCEP,ADFE,CAAS,ECEE,CCNP,CAAA,CEJN,CJQE,CCEF,CGVmB,EFIb,AEJN,GFIF,UAAe,YAAf,EAA2B;AHA7B,AGCI,ADMD,ADFE,AIRD,GHQF,MCJO,AEJA,GLGT,CGCa,CAAC,GAAG,AEJb,CFIA,AEJc,EFIE,CAAC,GAAG,IEJpB,CFIyB,IAAzB,EAA+B,CAAC,EAAhC,EAAoC;AHItC,AIdE,ADWE,AEJH,QDPK,GJcN,AGHS,CCXC,GDWG,CAAC,CHGd,AIde,CJcH,CGHK,CAAb,EAAgB,CAAC,EHGrB,AIde,CAAA,ADWS,CHGU,IGHL,IHG7B,CIde,CJcwC,AId7B,CDWtB,EAAkC,CAAC,CHGvC,AIdE,CDWE,CHGiE,AIdpC,CDWU;AHIzC,AIdE,ADWE,ADMN,ADFE,ECEF,IEjBI,CFiBJ,CAAA,CFHO,ACCA,GEJG,CCXC,ADWA,AFIA,CGfC,AHeA,CGfD,CJcT,AIdE,CFiBJ,ADFe,CEJC,ADMhB,ADFE,CDDe,AIdA,CAAC,AHeA,CGfD,AHeE,CEJR,CCXU,ADWA,CCXJ,ADWN,CAAL,AFIiB,CDDrB,AIdsB,AFiBxB,CEjBiB,ADWQ,AFIvB,EGfyB,AFiB3B,ADF2B,CGfV,AHeW,CGfxB,CHeF,EAA8B,KCEvB,KAAT,EAAqB;AFFnB,AIdE,ADWI,ADMN,ADFE,AIRJ,EAAA,IDPI,ECOJ,CLOO,AEGA,AGVP,EJQS,EGfE,CAAC,AFiBV,ADFE,CGfO,ADWE,AFIA,CGfT,CJcF,AEGa,CGVf,CDPiB,ADWT,AEJR,CLOkB,AIdA,ADWA,CCXD,ADWT,AFIJ,CCEF,ADFkB,CGfC,AHejB,CGfa,CDWM,AFIA,CGfC,AHeA,CGfP,ADWT,CHGN,CIdyB,AHeA,CGfV,CAAb,AHemB,AIRvB,GJQgC,AIRhC,GJQI,SIRJ;ALQE,AIdE,ADWG,ADMN,ADFG,AIRF,GHQF,GEfI,GJcG,EIdE,AHeA,AIRA,GLOP,AIdU,AHeR,CAAS,EDDE,ICCX,CDDgB,AIdR,AHeQ,CGfR,CCOH,CJQL,AIRK,CLOe,CCCC,CAAC,CGfd,CAAO,CHeU,CDDC,CAAC,ACCN,CIRhB,CAAA,CDPL,AHe8B,AIRb,ELOnB,CCCE,GIRK,CAAmB,QAAA,CAAA,UAAA,CAAW,KAA9B,CAAP;ALQD,AIdE,AHeC,AIRH,GAFD,QJUS,GAAL,CAAS,MAAT;AEJE,ADMR,ADDK,SCCL,ICNa,CDMb,GCNQ,CAAU,CAAV,EAAa,CAAb,IAAkB,IAAI,OAAA,CAAA,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,YAAhB,CAAlB;AHKN,AIdE,ADUG,ADhBP,ADqBG,AIRD,CHbF,CFoBE,AKPA,CHbF,ADGE,KDiBA,AIdM,ACON,CLOA,AKPA,GDPU,KAAK,CJcf,AKPA,CLOA,AKPA,MDPe,CJcf,AIde,ECOf,CLOA,EKPA,KDPe,CAAW,IJc1B,AKPU,EDPR,EAAgC,ECOlC,EAAwB;ALQtB,AIdE,ADUD,AEHD,MDPE,ECOI,GLOC,EIdE,CAAC,CAAD,ACOI,CDPX,ECOc,CDPD,ACOE,CDPD,ACOA,CDPD,CCOK,CDPD,ACOH,CDPD,ACOf,EDPsB,CAAP,EAAU,CAAV,CAAb;AJeA,AIdA,ADUH,ADlBU,ADuBX,EAAA,CEdQ,GHaJ,AIdA,CFRO,CAAA,IFsBD,CIdC,AFRA,CFsBC,AIdA,CAAD,CAAP,AFRO,ADuBX,CAAA,EDDiB,AIdA,CAAC,CAAD,AFRN,EEQU,CAAJ,EJcL,AIdY,AHexB,CDDyB,AIdR,AHejB,EGf2B,CAAV,CAAb,EJaK,ACET,GAAA,UAAO,MAAP,EAAqB;ADAjB,AIdA,AHeF,AITA,MLQE,AIdA,ECME,CJSC,EDDE,AIdA,CHeP,CDDS,ACCA,AITA,CDNC,IJcI,CKRV,CAAY,EDNN,AHeV,CGfU,EJcD,CAAa,CAAb,EAAgB,AIdf,CAAO,ECMb,CAAyB,EDN3B,ICME,EAAiC,OAAjC,CAAJ,EAA+C;ALMxC,AIXN,ADUH,AEJI,EFIJ,GHCE,GGDF,CAAA,EEJS,MAAL,CFIJ,AEJgB,CFIhB,OAAA,CEJI,CAAsB,CFI1B,KEJI,EAA8B,KFIlC,EEJI;ALSH,AGJC,AFIM,AIRJ,GLGJ,KCKQ,EAAA,CEJC,EFID,AIRG,GFIG,CEJV,EJQI,CEJN,AFIM,OAAA,EAAA;AGbN,ADUD,AFGO,AIPL,GFEH,KCRM,AHaI,IGbA,CHaA,GAAA,CGbK,CHaL,CAAA,KAAF,CGbO,CAAA,UAAA,CAAW,KAAxB,EAA+B;AJejC,AIdI,AHYI,EDER,IIdI,EJcJ,ACFiB,CDEjB,IIdW,CAAC,AHYK,CGZN,CAAP,CHYa,CDEjB,CAAA,AIdiB,AHYA,CGZC,AHYD,CGZA,EAAI,CAAJ,EAAO,AHYhB,CGZS,EAAU,CAAV,CAAb,GJcJ,GAAA,UAAgB,GAAhB,EAA6B;AACpB,AIdL,ADUJ,AEJE,EFIF,ICVI,EJcK,AGJT,CHIS,AGJT,EEJS,CLQA,CIdE,CAAC,CJcH,AIdE,CJcF,AIdL,ACMF,CLQO,CAAA,AGJT,CCViB,ADUjB,CCVkB,CAAD,EAAI,CAAJ,EAAO,CAAP,ADUjB,ECV2B,CAAV,ADUjB,CCVI,SDUK,GAAT,EAAsB;AHIb,AIbL,ADUK,AFCP,AILD,GARD,GDEI,EJaQ,AGHH,CHGG,AGHH,AFCF,EGXE,CJaG,AGHH,CFCE,CGXC,AHWA,CDEA,AGHH,CHGG,AGHH,CHGG,AGHH,AFCM,CDEN,AGHA,AFCP,EAAgB,CAAC,CGXP,CAAA,CHWU,KGXV,CAAO,AHWjB,EAA4B,CAAC,CGX3B,CHWF,EAAiC;ADGjC,AIbC,ADSM,AFEL,QEFQ,CAAA,EHIH,ACFA,CEFG,EFER,CEFQ,AFEC,CDEC,AGJF,CAAA,CAAH,KHIA,CAAa,ACFlB,CDEK,EAAgB,ACFA,CDEhB,CAAP,MCFuB,CAAA,MAAA,CAAO,WAA5B;ADGH,AGJC,AEHF,EAAA,CLIA,KKJA,CAAA,EFGS,KAAK,EEHd,CAAA,CFGS,CAAU,CAAV,EAAa,CAAb,AEHT,CFGE,EEHF,YAAA;ADLE,ADSD,AFCG,AIJF,GFAF,KCNM,CCMC,EJIE,CGVC,GHUG,CAAC,CGVC,ACMb,CAAc,CJIC,CAAb,EAAgB,CAAC,CIJnB,CDNa,ACMQ,CDNR,AHUS,IIJI,CJIxB,EAA2B,CAAC,EGVjB,AHUX,AIJF,CDNwB,CHUU,IGVlC,EAA+B;AJcjC,AIbI,AHUE,AIJL,ELOD,CKTA,GDJI,EJaJ,CAAA,GCHY,CGVD,CAAC,CAAD,CAAP,CHUa,CDGjB,CAAA,AIbiB,CAAC,AHUE,CGVH,EAAI,CAAJ,EAAO,AHUE,CGVT,AHUU,EDG3B,AIb2B,CAAV,CAAb,CJaJ,GCHoB,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAAd,CDGN;AACE,AIbE,ADSJ,EAAA,ICTI,EDSJ,CAAA,EHIS,AIbA,GAAG,EJaE,EGJd,CAAA,GCTY,CJaV,AIbU,KDSZ,CCTY,CAAO,CDSnB,KCTI,KDSM,MAAV,EAAkB,GAAlB,EAAqB;AHKpB,AIbE,ADSK,AFAF,AIHN,EAAA,CLKA,KGFQ,AEHR,CAAA,CFGQ,EFAE,CEAF,IFAO,CAAC,AIHhB,CFGQ,AEHR,CFGQ,GFAE,GIHV,CFGQ,CFAkB,CEAlB,AFAF,AIHN,EJG6B,UIH7B;AFGQ,AFCA,AIHN,QFEQ,AEFJ,MFEI,AEFE,CJGC,EEDH,AEFK,CJGP,CEDE,AFCO,CEDP,EEFU,IFEZ,EFCA,GAAqB,GIHd,EJGmB,AIHhC,CJGiC,KAA3B;ADKR,AIbE,ADOM,AFEA,AIHN,ELOF,MAAA,AGNkB,CHMlB,AKPO,EDNE,EDOS,ECPL,AHSA,CEFK,EHMlB,AGNkB,AFEV,CDIR,AGNkB,AFED,CIHf,CAAiB,EDNN,AHSL,CGTK,ADOL,AFEc,CAAC,AIHrB,CAAsB,EJGE,EDI1B,ACJsB,EIHpB,CLOF,AIba,AHSkB,CGTtB,CAAW,CHSZ,EAA4B,CAAC,GGT5B,AHS+B,EGTX,AHSO,CDIpC,EIbS,AHSoC,EGTX,CHS1B,EAA0C,EGTzC,AHSD,CGTN,CHSoD,EAA9C;ADKN,AIbD,AHSO,AIHN,GDpCK,MCoCA,ELOE,ICJI,CDIC,ECJN,AIHN,CJGe,AIHA,IJGT,CDIN,CKPA;ALQD,AGPQ,AFGD,AIHN,GLKF,KGLS,CAAA,AEAF,GFAE,GAAA,AFGI,AIHX,CFAO,CAAA,CAAA,AFGD,CAAS,WAAT,GAAuB,QAAA,CAAA,MAAA,CAAO,KAA9B;AGTV,ADMW,AFID,AIHP,GALD,KFIY,CCNd,ADMc,GAAA,GAAA,AFIC,CEJD,CAAA,CAAH,AFID,CAAS,CGVnB,KHUU;ADKR,AI/CF,AH2CS,CG3CT,CJ+CE,CI/CF,KJ+CE,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,AGRA,AFIG,AIJP,SFAS,AEAT,ELQW,EGRE,CAAC,CEAd,CLQgB,CGRC,CAAb,EAAgB,CHQhB,AGRiB,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AHSlC,AIfH,ADOM,AFID,AIxCL,CAAA,EL0CE,AK1CF,ID6BA,CAAA,GDOW,IAAI,CAAC,CCPhB,CAAA,CDOmB,CAAb,CCPS,CDOO,CAAC,GAAG,KAApB,CCPN,CDOiC,CAAC,EAA5B,EAAgC;AAC9B,YAAM,YAAY,GAAG,MAAM,CAAC,eAAP,CAAuB,CAAC,CAAD,EAAI,CAAJ,CAAvB,CAArB;AHQR,AGPQ,AFGJ,AIzCS,OAAA,CAAA,CL6Cb,ACJS,GEHK,AFGV,CAAS,CIzCA,CL6Cb,EGPmB,AEtCN,GFsCS,EFGlB,CIzCS,EFsCc,IAAL,CAAU,CAAC,GAAG,CAAd,EAAiB,CAAC,GAAG,CAArB,CAAd;AH3BR,AG4BQ,AFGL,CD/BH,EAAA,ACcE,KEcM,KAAK,CAAC,QAAN,CAAe,YAAf;AACA,QAAA,KAAK,CAAC,QAAN,CAAe,MAAM,CAAC,QAAP,EAAf;AHOR,AGNO,AFEP,ODIA,CAAA,CCJA,QDIA,CAAA,GAAe,ECJf,IDIA;AGLK,AF7CL,CAAA,EAAA;AE8CG,GAZD;AFcF,OAAA,CAAA,SAAA,CAAA,GAAe,cAAf;AEAE,EAAA,MAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO;AACL,MAAA,KAAK,EAAE,KAAK,IAAL,CAAU,CAAV,EAAa,MADf;AAEL,MAAA,MAAM,EAAE,KAAK,IAAL,CAAU;AAFb,KAAP;AAID,GALD;;AAOA,EAAA,MAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,MAAb,EAA6B,GAA7B,EAA0C;AAClC,QAAA,EAAA,GAAA,MAAA,CAAA,OAAA,EAAA;AAAA,QAAE,MAAA,GAAA,EAAA,CAAA,MAAF;AAAA,QAAU,KAAA,GAAA,EAAA,CAAA,KAAV;;AACN,QAAM,OAAO,GAAG,MAAM,CAAC,UAAP,EAAhB;AACO,QAAA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA;AAAA,QAAG,CAAA,GAAA,GAAA,CAAA,CAAA,CAAH;AAEP,QAAI,GAAG,GAAG,IAAV;;AACA,IAAA,GAAG,EAAE,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AACpC,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EAAgC;AAC9B,YACE,KAAK,QAAL,CAAc,CAAC,CAAC,GAAG,CAAL,EAAQ,CAAC,GAAG,CAAZ,CAAd,EAA8B,KAA9B,GAAsC,MAAM,CAAC,eAAP,CAAuB,CAAC,CAAD,EAAI,CAAJ,CAAvB,CAAtC,GACA,CAFF,EAGE;AACA,UAAA,GAAG,GAAG,KAAN;AACA,gBAAM,GAAN;AACD;AACF;AACF;;AACD,WAAO,GAAP;AACD,GAlBD;;AAmBF,SAAA,MAAA;AAvEA,CAAA,EAAA;;AAyEA,OAAA,CAAA,SAAA,CAAA,GAAe,MAAf","file":"tetris-js.77de5100.js","sourceRoot":"..","sourcesContent":["export enum FigureType {\n  'first' = 1,\n  'second',\n  'third',\n  'forth',\n}\n\nexport enum Colors {\n  green = 'green',\n  blue = 'blue',\n  black = 'black',\n  violet = 'violet',\n  transparent = 'transparent',\n  yellow = 'yellow',\n}\n\nexport interface IFigure {}\n\nclass Figure implements IFigure {\n  // Standart size of figure 4 x 2\n  pattern: (0 | 1)[][]\n  position: number[]\n  color: Colors\n  constructor(pattern: (0 | 1)[][], position?: number[], color?: Colors) {\n    this.pattern = pattern\n    this.position = position\n    this.color = color || Colors.black\n  }\n\n  getSize() {\n    return {\n      height: this.pattern.length,\n      width: this.pattern[0].length,\n    }\n  }\n\n  getPatternValue(pos: number[]) {\n    const [x, y] = pos\n    return this.pattern[y][x]\n  }\n\n  getPattern() {\n    return this.pattern\n  }\n\n  getPosition() {\n    return this.position\n  }\n\n  getColor() {\n    return this.color\n  }\n}\n\nexport default Figure\n","import { Point } from './Point'\nimport Layout from './Layout/Layout'\nimport { Colors } from './Figure/Figure'\n\nclass RendererCanvas {\n  ctx: any\n  node: HTMLCanvasElement\n  constructor() {\n    this.node = <HTMLCanvasElement>document.getElementById('tetris-js')\n    this.ctx = this.node.getContext('2d')\n  }\n\n  renderGrid() {\n    let width = 20\n    let height = 20\n    this.node.width = 201\n    this.node.height = 401\n    this.ctx.lineWidth = 1\n\n    for (let i = 0; i <= 11; i++) {\n      this.ctx.moveTo(i * 20 + 0.5, 0)\n      this.ctx.lineTo(i * 20 + 0.5, 400)\n      this.ctx.stroke()\n    }\n\n    for (let j = 0; j <= 21; j++) {\n      this.ctx.moveTo(0, j * 20 + 0.5)\n      this.ctx.lineTo(200, j * 20 + 0.5)\n      this.ctx.stroke()\n    }\n  }\n\n  render(layout: Layout) {\n    this.ctx.beginPath()\n    const { width, height } = layout.getSize()\n    for (let i = 0; i < height; i++) {\n      this.ctx.fillStyle = Colors.transparent\n      for (let j = 0; j < width; j++) {\n        const point = layout.getPoint([j, i])\n        if (point.value === 1) {\n          this.ctx.fillStyle = point.color\n          this.ctx.rect(j * 20 + 0.5, i * 20 + 0.5, 20, 20)\n          this.ctx.fill()\n          this.ctx.strokeStyle = Colors.black\n          this.ctx.stroke()\n        }\n      }\n    }\n    this.ctx.closePath()\n  }\n}\n\nexport default RendererCanvas\n","import { Colors } from './Figure/Figure'\n\ninterface IPoint {\n  x: number\n  y: number\n  value: 0 | 1\n  color: Colors\n}\n\nexport class Point implements IPoint {\n  x: number\n  y: number\n  value: 0 | 1\n  color: Colors\n  constructor(x: number, y: number, value?: 0 | 1, color = Colors.transparent) {\n    this.x = x\n    this.y = y\n    this.color = color\n    if (typeof value !== 'undefined') {\n      this.value = value\n    }\n  }\n\n  setColor(color: Colors) {\n    this.color = color\n  }\n\n  setValue(value: 1 | 0) {\n    this.value = value\n  }\n}\n","import Figure, { Colors } from '../Figure/Figure'\nimport { Point } from '../Point'\n\nexport const sum = (a: number, b: number) => a + b\n\nexport interface ILayout {}\n\nclass Layout {\n  private grid: Point[][]\n  private columns: number\n  private rows: number\n  constructor(rows: number, columns: number, defaultValue: 1 | 0 = 0) {\n    this.rows = rows\n    this.columns = columns\n    this.grid = [[]]\n    this.create(defaultValue)\n  }\n\n  private create(defaultValue) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (!this.grid[i]) {\n          this.grid[i] = []\n        }\n        this.grid[i][j] = new Point(j, i, defaultValue)\n      }\n    }\n  }\n\n  getGrid() {\n    return this.grid\n  }\n\n  getPoint(pos: number[]): Point {\n    const [x, y] = pos\n    return this.grid[y][x]\n  }\n\n  addFigure(figure, pos) {\n    const { height, width } = figure.getSize()\n    const [x, y] = pos\n\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        const patternValue = figure.getPatternValue([j, i])\n        const point = this.grid[y + i][x + j]\n        point.setValue(patternValue)\n        point.setColor(figure.getColor())\n      }\n    }\n  }\n\n  getSize() {\n    return {\n      width: this.grid[0].length,\n      height: this.grid.length,\n    }\n  }\n\n  canPosFigure(figure: Figure, pos: number[]) {\n    const { height, width } = figure.getSize()\n    const pattern = figure.getPattern()\n    const [x, y] = pos\n\n    let res = true\n    out: for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        if (\n          this.getPoint([j + x, i + y]).value + figure.getPatternValue([j, i]) >\n          1\n        ) {\n          res = false\n          break out\n        }\n      }\n    }\n    return res\n  }\n}\n\nexport default Layout\n","import Figure, { FigureType, Colors } from './Figure/Figure'\n\nclass FigureMaker {\n  static create(type: FigureType, pos?: number[]) {\n    let pattern = []\n    let color = Colors.black\n    // Will be random value\n    // Should be in empty space\n\n    if (type === FigureType.first) {\n      pattern[0] = [0, 1, 1, 0]\n      pattern[1] = [1, 1, 1, 1]\n      color = Colors.violet\n    }\n\n    if (type === FigureType.second) {\n      pattern[0] = [1, 1, 1, 1]\n      pattern[1] = [0, 0, 0, 1]\n      color = Colors.green\n    }\n\n    if (type === FigureType.third) {\n      pattern[0] = [1, 1, 1, 1]\n      pattern[1] = [1, 0, 0, 0]\n      color = Colors.blue\n    }\n\n    if (type === FigureType.forth) {\n      pattern[0] = [1, 1, 1, 1]\n      color = Colors.yellow\n    }\n\n    return new Figure(pattern, pos, color)\n  }\n}\n\nexport default FigureMaker\n","import RendererCanvas from './RendererCanvas'\nimport Layout from './Layout/Layout'\nimport FigureMaker from './FigureMaker'\nimport Figure, { FigureType } from './Figure/Figure'\n\ninterface ITetris {}\n\nexport class Tetris implements ITetris {\n  renderer: RendererCanvas\n  layout: Layout\n  figureStack: Figure[]\n  constructor() {\n    this.layout = new Layout(40, 20)\n    this.renderer = new RendererCanvas()\n    this.figureStack = []\n    this.renderer.renderGrid()\n  }\n\n  createFigure() {\n    return FigureMaker.create(FigureType.first)\n  }\n\n  posFigure(figure: Figure) {\n    const initPos = [2, 0]\n    if (this.layout.canPosFigure(figure, initPos)) {\n      this.layout.addFigure(figure, initPos)\n      return true\n    }\n\n    return false\n  }\n\n  render() {\n    this.renderer.render(this.layout)\n  }\n\n  runStep() {\n    let figure = this.createFigure()\n    this.figureStack.push(figure)\n    this.posFigure(figure)\n    this.render()\n  }\n}\n","import { Tetris } from './classes/Tetris'\n\nlet tetris = new Tetris()\n\ntetris.runStep()\n"]}